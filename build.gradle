/**
 * 1.0.x   : Dev
 */
def ARTIFACT_VERSION = System.env.CIRCLE_TAG == null ?
        "1.0" : System.env.CIRCLE_TAG.substring(System.env.CIRCLE_TAG.indexOf('v') + 1)
def REPOSITORY_NAME = "maven"
def BINTRAY_LICENSES = ["MIT"]
def BINTRAY_LABELS = ["android"]
def BINTRAY_API_KEY = System.env.BINTRAY_API_KEY
def BINTRAY_GPG_PASS = System.env.BINTRAY_GPG_PASS

buildscript {
    repositories {
        maven { url "https://maven.google.com" }
        jcenter()
        maven { url "https://dl.bintray.com/eaglesakura/maven/" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0-beta2'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

repositories {
    maven { url "https://maven.google.com" }
    jcenter()
    maven { url "https://dl.bintray.com/eaglesakura/maven/" }
    maven { url 'https://jitpack.io' }
    maven { url "https://clojars.org/repo/" }
}

apply plugin: 'com.android.library'
group = "com.eaglesakura"
version = ARTIFACT_VERSION + getArtifactVersionSuffix()

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"    // JUnit4
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDirs = ["src/main/libs"]
    }
    lintOptions {
        abortOnError false
    }
}

// Local or maven
if (!hasProperty("EGLIBRARY_COMPILE_LOCAL")) {
    ext.EGLIBRARY_COMPILE_LOCAL = false
}

dependencies {
    // install sqliteX
    implementation "com.eaglesakura:android-sqliteX:1.0.build-33"

    /**
     * Android Support Library
     */
    implementation "com.android.support:support-annotations:26.0.1"
    implementation "android.arch.persistence.room:runtime:1.0.0-alpha9"
    testAnnotationProcessor "android.arch.persistence.room:compiler:1.0.0-alpha9"
    androidTestAnnotationProcessor "android.arch.persistence.room:compiler:1.0.0-alpha9"

    androidTestImplementation "com.android.support:support-v4:26.0.1"
    androidTestImplementation "com.android.support:appcompat-v7:26.0.1"
    androidTestImplementation "com.eaglesakura:android-commons:2.3.build-35"
    androidTestImplementation("com.eaglesakura:android-devicetest-support:2.3.1") {
        exclude(group: "com.android.support")
    }
    testImplementation("com.eaglesakura:android-unittest-support:1.6.0") {
        exclude(group: "com.android.support")
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

android.libraryVariants.all { variant ->
    if (!"release".equals(variant.name) || "".equals(ARTIFACT_VERSION)) {
        return;
    }

    task("javadoc", type: Javadoc) {
        title = "${file(".").name} ver ${ARTIFACT_VERSION}"
        description "Generates Android Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

        classpath = files(variant.javaCompile.classpath.files) +
                files(ext.androidJar) +
                files("build/intermediates/classes/${variant.name}/") +
                fileTree("build/intermediates/exploded-aar").include("**/*.jar")

        options.links("http://docs.oracle.com/javase/8/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/*Dao.java' /* ignore greenDAO */
        exclude '**/DaoMaster.java' /* ignore greenDAO */
        exclude '**/DaoSession.java' /* ignore greenDAO */
        exclude '**/R.java' /* ignore greenDAO */

        options.addStringOption('Xdoclint:none', '-quiet')
        options.encoding = "UTF-8"
        project.configure(options) {
            memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
            charSet = "UTF-8"
        }
    }


    task("javadocJar", type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

/**
 * バージョンを取得する
 * CircleCIの場合、バージョン末尾にビルド番号を付与する
 */
def getArtifactVersionSuffix() {
    String CIRCLE_TAG = System.env.CIRCLE_TAG

    if (CIRCLE_TAG != null) {
        // TAGがある場合それを直接利用する
        return ""
    }

    if (System.env.CIRCLE_BUILD_NUM != null) {
        // CircleCIのバージョンが指定されているので、そちらを利用する
        return ".build-${System.env.CIRCLE_BUILD_NUM}"
    } else {
        return ".snapshot"
    }
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

bintray {
    user = 'eaglesakura'
    key = BINTRAY_API_KEY
    pkg {
        repo = REPOSITORY_NAME
        name = file(".").absoluteFile.name
        licenses = BINTRAY_LICENSES
        labels = BINTRAY_LABELS
        issueTrackerUrl = "https://github.com/eaglesakura/${file(".").absoluteFile.name}/issues"
        vcsUrl = "https://github.com/eaglesakura/${file(".").absoluteFile.name}"
        version {
            name = project.version
            released = new Date()
            gpg {
                sign = true
                passphrase = BINTRAY_GPG_PASS
            }
        }
    }
    configurations = ['archives']
}

import org.apache.tools.ant.taskdefs.condition.Os

task installSQLiteX {
    def SQLITE_X_VERSION = "v1.0.x"
    def downloadURL
    def fileName

    if (Os.isFamily(Os.FAMILY_MAC)) {
        downloadURL = "https://raw.githubusercontent.com/eaglesakura/android-sqliteX/${SQLITE_X_VERSION}/prebuilt/"
        fileName = "libsqliteX.dylib"
    } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        downloadURL = "https://raw.githubusercontent.com/eaglesakura/android-sqliteX/${SQLITE_X_VERSION}/prebuilt/"
        fileName = "sqliteX.dll"
    } else {
        downloadURL = "https://raw.githubusercontent.com/eaglesakura/android-sqliteX/${SQLITE_X_VERSION}/prebuilt/"
        fileName = "libsqliteX.so"
    }

    def dstFile = new File(fileName)
    if (!dstFile.file) {
        new File(fileName) << new URL("${downloadURL}${fileName}").openStream()
        println "${fileName} installed"
    }
}
